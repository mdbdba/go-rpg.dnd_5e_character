package models

import (
	"context"
	"database/sql"
	"github.com/mdbdba/go_rpg_commonUtils/dbu"
	"go.uber.org/zap"
)

// var (
// ErrNotFound is returned when a resource cannot be found
// in the database.
// ErrNotFound = errors.New("models: resource not found")
// )

type User struct {
	Id        int64
	FirstName string
	Email     string
	CreatedOn string
}

type UserService struct {
	db *dbu.DBo
}

// NewUserService gets a UserService connection set up.
func NewUserService(logger *zap.SugaredLogger) (*UserService, error) {
	dbo, err := dbu.OpenConn(logger, "dnd", "5e",
		"dev", "webuser")
	if err != nil {
		return nil, err
	}
	return &UserService{
		db: dbo,
	}, nil
}

// Close Closes the UserService database connection
func (us *UserService) Close() error {
	return us.db.CleanUpAndClose()
}

// ByID will look up a user with the provided ID.
// If the user is found, we will return a nil error
// If the user is not found, we will return ErrNotFound
// If there is another error, we will return an error with
// more information about what went wrong. This may not be
// an error generated by the models package.
//
// As a general rule, any error but ErrNotFound should
// probably result in a 500 error.
func (us *UserService) ByID(id int) (*User, error) {
	query := `Select id, first_name, email, created_on from public."user" ` +
		`where deleted_on is null and id = $1`
	rows, err := us.db.Query(context.Background(), query, id)
	if err == nil {
		for rows.Next() {
			var i int64
			var f sql.NullString
			var fs string
			var e sql.NullString
			var es string
			var d sql.NullTime
			var ds string
			err = rows.Scan(&i, &f, &e, &d)
			if err != nil {
				return nil, err
			}
			if f.Valid {
				fs = f.String
			} else {
				fs = "Unknown"
			}
			if e.Valid {
				es = e.String
			} else {
				es = "Unknown"
			}
			if d.Valid {
				ds = d.Time.String()
			} else {
				ds = "Unknown"
			}
			return &User{
				Id:        i,
				FirstName: fs,
				Email:     es,
				CreatedOn: ds,
			}, nil
		}
	}
	return nil, err
}
